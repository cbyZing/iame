<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


    <context:component-scan base-package="com.qd.*">
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>


    <!-- 加载配置文件 -->
    <!--<context:property-placeholder location="classpsqlties/jsqlties"/>-->
    <!-- 与上面的配置等价，下面的更容易理解 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations"> <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
            <array>
                <value>classpath:jdbc.properties</value>
                <!--<value>classpsqlties/secsqlties</value>-->
            </array>
        </property>
    </bean>


    <!-- 数据源配置, 使用 alibaba.druid 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close" autowire="byName">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--<property name="driverClassName" value="com.mysql.jdbc.Driver" />-->
        <!--<property name="url" value="jdbc:mysql://127.0.0.1:3306/sprimy?useUnicode=true&characterEncoding=utf8"></property>-->
        <!--<property name="username" value="root" />-->
        <!--<property name="password" value="123456" />-->


        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements"
           value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize"
           value="20" /> -->
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>


    <!--配置一个JdbcTemplate实例，并将这个共享的安全的实例注入到不同的DAO类中去 -->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>


    <!--配置sessionfactory-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
        <property name="hibernateProperties">
            <props>
                <!--<prop key="hibernate.generate_statistics" >${hibernate.generate_statistics}</prop>-->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <!--如果显示 SQL，输出的 SQL 时候要格式化-->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <!--在显示的 SQL 中增加一些 Hibernate 提供的注释说明，依此来解释它生成的 SQL 意思-->
                <!--配置如何根据java模型生成数据库表结构,常用update,validate-->
                <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <!--关于这个属性可以看：http://blog.csdn.net/dracotianlong/article/details/27834143-->
                <!--ImprovedNamingStrategy 是采用下划线，符合我们一般命名表字段的习惯-->
                <!--所以，命名规则 My_NAME->MyName-->
                <!--<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>-->
                <!--设置最大的外链接深度，关键建议是0~3，0表示禁用-->
                <!--<prop key="hibernate.max_fetch_depth">3</prop>-->
            </props>
        </property>
        <property name="mappingDirectoryLocations">
            <list>
                <value>
                    <!--classpath:com/tukechina/mms/pojos-->
                </value>
            </list>
        </property>
        <property name="mappingResources">
            <list>
                <!--<value>classpath*:/test/domain/MyBean.hbm.xml</value>-->
                <!--<value>classpath*:/test/domain/BasicBean.hbm.xml</value>-->
            </list>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.qd.entity</value>
            </list>
        </property>
    </bean>


    <!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>


    <aop:config>
        <aop:pointcut id="userService" expression="execution(* com.qd.modules.login.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="userService"/>
    </aop:config>

    <!--声明式事务管理-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!--all methods starting with '*' are read-only -->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
           <!--other methods use the default transaction settings (see below) -->
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!--   事务支持注解  -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
    <!--编程式事务使用-->
    <!--<bean id="txDefinition" class="org.springframework.transaction.support.DefaultTransactionDefinition"></bean>-->


</beans>